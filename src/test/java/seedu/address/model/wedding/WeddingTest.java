package seedu.address.model.wedding;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

import org.junit.jupiter.api.Test;

public class WeddingTest {

    @Test
    public void constructor_autoGeneratedId_success() {
        Wedding w = new Wedding("Alice & Bob", "2025-12-01", "Paris");
        // Check that the ID starts with 'W'
        assertTrue(w.getWeddingId().startsWith("W"));

        // Verify basic fields
        assertEquals("Alice & Bob", w.getWeddingName());
        assertEquals("2025-12-01", w.getWeddingDate());
        assertEquals("Paris", w.getLocation());
    }

    @Test
    public void constructor_withSpecifiedId_success() {
        // Suppose we have an existing ID "W10" from saved data
        Wedding w = new Wedding("W10", "Charlie & Diana", "2026-01-01", "Hawaii");
        assertEquals("W10", w.getWeddingId());
        assertEquals("Charlie & Diana", w.getWeddingName());
        assertEquals("2026-01-01", w.getWeddingDate());
        assertEquals("Hawaii", w.getLocation());
    }

    @Test
    public void isSameWedding() {
        Wedding w1 = new Wedding("Alice & Bob", "2025-12-01", "Paris");
        // same object -> returns true
        assertTrue(w1.isSameWedding(w1));

        // null -> returns false
        assertFalse(w1.isSameWedding(null));

        // different ID -> returns false
        Wedding w2 = new Wedding("Eve & Frank", "2025-12-02", "London");
        assertFalse(w1.isSameWedding(w2));

        // same ID, different other fields -> returns true
        Wedding w3 = new Wedding(w1.getWeddingId(), "Gina & Harry", "2025-12-03", "Rome");
        assertTrue(w1.isSameWedding(w3));
    }

    @Test
    public void equals_sameObject_returnsTrue() {
        Wedding w1 = new Wedding("Alice & Bob", "2025-12-01", "Paris");
        // same object reference
        assertEquals(w1, w1);
    }

    @Test
    public void equals_differentType_returnsFalse() {
        Wedding w1 = new Wedding("Alice & Bob", "2025-12-01", "Paris");
        assertNotEquals(w1, "some string");
    }

    @Test
    public void equals_sameIdSameFields_returnsTrue() {
        // Construct two weddings with the same ID and same other fields
        Wedding w1 = new Wedding("W15", "Alice & Bob", "2025-12-01", "Paris");
        Wedding w2 = new Wedding("W15", "Alice & Bob", "2025-12-01", "Paris");
        assertEquals(w1, w2);
        assertEquals(w1.hashCode(), w2.hashCode());
    }

    @Test
    public void equals_differentId_returnsFalse() {
        // w1 uses auto-generated ID, w2 has a specified ID
        Wedding w1 = new Wedding("Alice & Bob", "2025-12-01", "Paris");
        Wedding w2 = new Wedding("W999", "Alice & Bob", "2025-12-01", "Paris");
        assertNotEquals(w1, w2);
    }

    @Test
    public void equals_differentFields_returnsFalse() {
        Wedding w1 = new Wedding("W10", "Alice & Bob", "2025-12-01", "Paris");
        // Different name
        Wedding w2 = new Wedding("W10", "Eve & Frank", "2025-12-01", "Paris");
        assertNotEquals(w1, w2);

        // Different date
        Wedding w3 = new Wedding("W10", "Alice & Bob", "2025-12-31", "Paris");
        assertNotEquals(w1, w3);

        // Different location
        Wedding w4 = new Wedding("W10", "Alice & Bob", "2025-12-01", "London");
        assertNotEquals(w1, w4);
    }

    @Test
    public void toString_correctFormat() {
        Wedding w = new Wedding("Alice & Bob", "2025-12-01", "Paris");
        String expected = String.format("Wedding: %s (ID: %s) Date: %s Location: %s",
                w.getWeddingName(), w.getWeddingId(), w.getWeddingDate(), w.getLocation());
        assertEquals(expected, w.toString());
    }
}
