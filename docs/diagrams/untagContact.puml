@startuml
!include style.puml
skinparam ArrowFontStyle plain

actor "User" as User
participant ":LogicManager" as LM #Blue
participant ":AddressBookParser" as ABP #Blue
participant ":UntagCommandParser" as UntagCommandParser #Blue
participant "u:UntagCommand" as UntagCommand #Blue
participant ":Model" as Model #Red
participant "r:CommandResult" as CommandResult #DarkRed
participant ":Storage" as Storage #Orange

User -> LM: execute("untag 1 W12345")
activate LM

LM -> ABP: parseCommand("untag 1 W12345")
activate ABP
ABP -> UntagCommandParser: parse(arguments)
activate UntagCommandParser

UntagCommandParser -> UntagCommandParser: validate and parse arguments
UntagCommandParser -> UntagCommand: new UntagCommand(index, weddingId)
activate UntagCommand
UntagCommand --> UntagCommandParser
deactivate UntagCommand

UntagCommandParser --> ABP: UntagCommand
deactivate UntagCommandParser

ABP --> LM: UntagCommand
deactivate ABP

LM -> UntagCommand: execute(model)
activate UntagCommand

UntagCommand -> Model: getFilteredPersonList()
activate Model
Model --> UntagCommand: lastShownList
deactivate Model

UntagCommand -> UntagCommand: retrieve person from list
UntagCommand -> UntagCommand: check if person has the tag
UntagCommand -> Model: untagPerson(personToUntag, tag)
activate Model
Model --> UntagCommand
deactivate Model

UntagCommand -> Model: updateFilteredPersonList(predicate)
activate Model
Model --> UntagCommand
deactivate Model

UntagCommand -> CommandResult: new CommandResult(successMessage)
activate CommandResult
CommandResult --> UntagCommand
deactivate CommandResult

UntagCommand --> LM: CommandResult
deactivate UntagCommand

LM -> Storage: saveAddressBook(Model.getAddressBook())
activate Storage
Storage --> LM: Save successful
deactivate Storage

LM --> User: display result
deactivate LM
@enduml